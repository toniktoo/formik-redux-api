{"version":3,"sources":["redux/actions/actionAuth.js","redux/reducers/rootReducer.js","serviceWorker.js","components/FormField.jsx","api/signInAuth.js","components/FormLogin.jsx","components/Home.jsx","components/FormRegistration.jsx","components/PrivateRoute.jsx","components/PublicRoute.jsx","App.jsx","index.jsx"],"names":["authenticatedUserRequest","createAction","authenticatedUserSuccess","authenticatedUserFailure","logout","initState","name","token","undefined","isLoadingAuth","isAuth","reducer","handleActions","state","payload","localStorage","removeItem","Boolean","window","location","hostname","match","FormField","props","className","msg","signInAuth","username","email","password","setFieldError","URL","dispatch","a","data","user","authOptions","method","url","JSON","stringify","headers","json","axios","response","setItem","key","responseErrors","errors","toString","schema","yup","shape","required","matches","FormLogin","withFormik","mapPropsToValues","validationSchema","handleSubmit","displayName","onSubmit","component","placeholder","type","to","connect","onClick","max","FormRegistration","Component","rest","render","useEffect","path","exact","Home","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b324e3de.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\r\n\r\nexport const authenticatedUserRequest = createAction(\r\n  'USER_AUTHENTICARED_REQUEST'\r\n);\r\nexport const authenticatedUserSuccess = createAction(\r\n  'USER_AUTHENTICARED_SUCCESS'\r\n);\r\nexport const authenticatedUserFailure = createAction(\r\n  'USER_AUTHENTICARED_FAILURE'\r\n);\r\n\r\nexport const logout = createAction('LOG_OUT_PROFILE');\r\n","import { handleActions } from 'redux-actions';\r\nimport {\r\n  authenticatedUserFailure,\r\n  authenticatedUserRequest,\r\n  authenticatedUserSuccess,\r\n  logout,\r\n} from '../actions/actionAuth';\r\n\r\nconst initState = {\r\n  name: '',\r\n  token: undefined,\r\n  isLoadingAuth: false,\r\n  isAuth: false,\r\n};\r\n\r\nexport const reducer = handleActions(\r\n  {\r\n    [authenticatedUserRequest]: (state, { payload: { isLoadingAuth } }) => {\r\n      return {\r\n        ...state,\r\n        isLoadingAuth,\r\n      };\r\n    },\r\n    [authenticatedUserSuccess]: (\r\n      state,\r\n      { payload: { isAuth, token, name } }\r\n    ) => {\r\n      return {\r\n        ...state,\r\n        isAuth,\r\n        token,\r\n        name,\r\n      };\r\n    },\r\n    [authenticatedUserFailure]: (state, { payload: { isAuth } }) => {\r\n      return {\r\n        ...state,\r\n        isAuth,\r\n      };\r\n    },\r\n    [logout]: (state, { payload: { isAuth, token, name } }) => {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('name');\r\n      return {\r\n        ...state,\r\n        name,\r\n        isAuth,\r\n        token,\r\n      };\r\n    },\r\n  },\r\n  initState\r\n);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { ErrorMessage } from 'formik';\nimport { Input } from 'formik-antd';\n\nconst FormField = ({ name, ...props }) => (\n  <div className=\"formFieldWrap\">\n    <Input name={name} {...props} className=\"formField\" />\n    <ErrorMessage name={name} className=\"formFieldError\">\n      {(msg) => <span className=\"errorMsg\">{msg}</span>}\n    </ErrorMessage>\n  </div>\n);\n\nexport default FormField;\n","import axios from 'axios';\r\nimport {\r\n  authenticatedUserRequest,\r\n  authenticatedUserSuccess,\r\n  authenticatedUserFailure,\r\n} from '../redux/actions/actionAuth';\r\n\r\nexport const signInAuth = ({\r\n  username,\r\n  email,\r\n  password,\r\n  setFieldError,\r\n  URL,\r\n}) => {\r\n  return async (dispatch) => {\r\n    dispatch(authenticatedUserRequest({ isLoadingAuth: true }));\r\n    try {\r\n      const data = {\r\n        user: { email: email, password: password, username: username },\r\n      };\r\n\r\n      const authOptions = {\r\n        method: 'POST',\r\n        url: URL,\r\n        data: JSON.stringify(data),\r\n        headers: {\r\n          'Content-Type': 'application/json;charset=utf-8',\r\n        },\r\n        json: true,\r\n      };\r\n      const response = await axios(authOptions);\r\n      const token = await response.data.user.token;\r\n      const name = await response.data.user.username;\r\n      await dispatch(authenticatedUserSuccess({ isAuth: true, token, name }));\r\n      localStorage.setItem('token', token);\r\n      localStorage.setItem('name', name);\r\n      dispatch(authenticatedUserRequest({ isLoadingAuth: false }));\r\n    } catch (err) {\r\n      const responseErrors = err.response.data.errors;\r\n      for (let key in responseErrors) {\r\n        if (key.toString() === 'email or password') {\r\n          setFieldError('email', 'email or password');\r\n          setFieldError('password', 'email or password');\r\n        } else {\r\n          setFieldError(key.toString(), responseErrors[key][0]);\r\n        }\r\n      }\r\n      dispatch(authenticatedUserFailure({ isAuth: false }));\r\n      dispatch(authenticatedUserRequest({ isLoadingAuth: false }));\r\n    }\r\n  };\r\n};\r\n","import React from 'react';\nimport { withFormik } from 'formik';\nimport * as yup from 'yup';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport FormField from './FormField';\nimport { signInAuth } from '../api/signInAuth';\n\nconst URL = 'https://conduit.productionready.io/api/users/login';\n\nconst schema = yup.object().shape({\n  email: yup.string().email('Not correct email').required('Enter email'),\n  password: yup\n    .string()\n    .required('Enter password')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\n      'Password between 8 and 40 characters, at least one number and one capital letter',\n    ),\n});\n\nconst renderForm = ({ isLoadingAuth, handleSubmit }) => (isLoadingAuth ? (\n  'Loading...'\n) : (\n  <form onSubmit={handleSubmit} className=\"form\">\n    <div>\n      <h2 className=\"title\">Login</h2>\n      <hr className=\"lineTitle\" />\n      <FormField\n        name=\"email\"\n        component=\"input\"\n        placeholder=\"enter email...\"\n      />\n      <FormField\n        name=\"password\"\n        type=\"password\"\n        component=\"input\"\n        placeholder=\"enter password...\"\n      />\n    </div>\n    <button type=\"submit\">Login</button>\n    <Link to=\"/sign\" className=\"link\">\n      Registration\n    </Link>\n  </form>\n));\n\nconst FormLogin = withFormik({\n  mapPropsToValues: () => ({\n    email: '',\n    password: '',\n  }),\n  validationSchema: () => schema,\n  handleSubmit: ({ email, password }, { props, setFieldError }) => {\n    props.signInAuth({\n      email, password, setFieldError, URL,\n    });\n  },\n  displayName: 'FormAuth',\n})(renderForm);\n\nconst mapStateToProps = (state) => ({ isLoadingAuth: state.isLoadingAuth });\n\nexport default connect(mapStateToProps, { signInAuth })(FormLogin);\n","/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { logout } from '../redux/actions/actionAuth';\n\nconst Home = ({ isLoadingAuth, dispatch, name }) => {\n  const handleLogout = () => {\n    dispatch(logout({ isAuth: false, token: undefined, name: '' }));\n  };\n  return isLoadingAuth ? (\n    'Loading...'\n  ) : (\n    <div>\n      <h2>\n        Ваше имя:\n        {name}\n      </h2>\n      <button onClick={handleLogout}>Logout</button>\n    </div>\n  );\n};\n\nexport default connect((state) => ({\n  name: state.name,\n  isLoadingAuth: state.isLoadingAuth,\n}))(Home);\n","import React from 'react';\nimport { withFormik } from 'formik';\nimport * as yup from 'yup';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport FormField from './FormField';\nimport { signInAuth } from '../api/signInAuth';\n\nconst URL = 'https://conduit.productionready.io/api/users/';\n\nconst schema = yup.object().shape({\n  username: yup\n    .string()\n    .max(50, 'no more than 50 characters')\n    .required('Заполните имя'),\n  email: yup.string().email('Not correct email').required('Enter email'),\n  password: yup\n    .string()\n    .required('Enter password')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/,\n      'Password between 8 and 40 characters, at least one number and one capital letter',\n    ),\n});\n\nconst renderForm = ({ isLoadingAuth, handleSubmit }) => (isLoadingAuth ? (\n  'Loading...'\n) : (\n  <form onSubmit={handleSubmit} className=\"form\">\n    <div>\n      <h2 className=\"title\">Registration</h2>\n      <hr className=\"lineTitle\" />\n      <FormField\n        name=\"username\"\n        component=\"input\"\n        placeholder=\"enter username...\"\n      />\n      <FormField\n        name=\"email\"\n        component=\"input\"\n        placeholder=\"enter email...\"\n      />\n      <FormField\n        name=\"password\"\n        type=\"password\"\n        component=\"input\"\n        placeholder=\"enter password...\"\n      />\n    </div>\n    <button type=\"submit\">Registration</button>\n    <Link to=\"/login\" className=\"link\">\n      Login\n    </Link>\n  </form>\n));\n\nconst FormRegistration = withFormik({\n  mapPropsToValues: () => ({\n    username: '',\n    email: '',\n    password: '',\n  }),\n  validationSchema: () => schema,\n  handleSubmit: ({ username, email, password }, { props, setFieldError }) => {\n    props.signInAuth({\n      username, email, password, setFieldError, URL,\n    });\n  },\n  displayName: 'FormAuth',\n})(renderForm);\n\nconst mapStateToProps = (state) => ({ isLoadingAuth: state.isLoadingAuth });\n\nexport default connect(mapStateToProps, { signInAuth })(FormRegistration);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst PrivateRoute = ({ component: Component, isAuth, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) => (isAuth ? <Component {...props} /> : <Redirect to=\"/login\" />)}\n  />\n);\n\nexport default connect((state) => ({ isAuth: state.isAuth }))(PrivateRoute);\n","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nconst PublicRoute = ({ component: Component, isAuth, ...rest }) => (\n  <Route\n    {...rest}\n    render={(props) => (isAuth ? <Redirect to=\"/\" /> : <Component {...props} />)}\n  />\n);\n\nexport default connect((state) => ({ isAuth: state.isAuth }))(PublicRoute);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Switch, Redirect } from 'react-router-dom';\nimport FormLogin from './components/FormLogin';\nimport Home from './components/Home';\nimport FormRegistration from './components/FormRegistration';\nimport PrivateRoute from './components/PrivateRoute';\nimport PublicRoute from './components/PublicRoute';\nimport { authenticatedUserSuccess } from './redux/actions/actionAuth';\n\nconst App = ({ dispatch }) => {\n  useEffect(() => {\n    if (localStorage.token !== undefined) {\n      dispatch(\n        authenticatedUserSuccess({\n          isAuth: true,\n          token: localStorage.token,\n          name: localStorage.name,\n        }),\n      );\n    }\n  }, [dispatch]);\n\n  return (\n    <div className=\"app\">\n      <Switch>\n        <PrivateRoute path=\"/\" exact component={Home} />\n        <PublicRoute path=\"/login\" component={FormLogin} />\n        <PublicRoute path=\"/sign\" component={FormRegistration} />\n        <Redirect to=\"/login\" />\n      </Switch>\n    </div>\n  );\n};\n\nexport default connect((state) => ({\n  isLoadingAuth: state.isLoadingAuth,\n  token: state.token,\n}))(App);\n","/* eslint-disable no-underscore-dangle */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './style.css';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { BrowserRouter } from 'react-router-dom';\nimport { reducer } from './redux/reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nconst store = createStore(\n  reducer,\n  compose(\n    applyMiddleware(thunk),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n  ),\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}